
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.rapidservice.rapidservice;

import java.math.BigDecimal;
import java.math.MathContext;
import java.util.logging.Logger;

import entity.Producto;
import facade.PersistenceFacade;

/**
 * This class was generated by Apache CXF 2.7.18
 * 2017-05-02T22:01:24.119-05:00
 * Generated source version: 2.7.18
 * 
 */

@javax.jws.WebService(
                      serviceName = "RapidService",
                      portName = "RapidServiceSOAP",
                      targetNamespace = "http://www.rapidservice.org/RapidService/",
                      wsdlLocation = "file:/C:/WorkSpaceKall/RapidService/WebContent/RapidService.wsdl",
                      endpointInterface = "org.rapidservice.rapidservice.RapidService")
                      
public class RapidServiceImpl implements RapidService {

    private static final Logger LOG = Logger.getLogger(RapidServiceImpl.class.getName());

    /* (non-Javadoc)
     * @see org.rapidservice.rapidservice.RapidService#processQuote(org.rapidservice.rapidservice.ProcessQuoteElement  parameters )*
     */
    public org.rapidservice.rapidservice.ProcessQuoteResponseElement processQuote(ProcessQuoteElement parameters) { 
        LOG.info("Executing operation processQuote");
        System.out.println(parameters);
        try {
        	org.rapidservice.rapidservice.ProcessQuoteResponseElement _return = new org.rapidservice.rapidservice.ProcessQuoteResponseElement();
        	BigDecimal supplierPrice = BigDecimal.ZERO;
        	int cantidadDisponible = 0;
			if( parameters != null && parameters.items!=null ){
				PersistenceFacade facade = new PersistenceFacade();
				for( Item i: parameters.items ){
					Producto producto = facade.consultarProductoXCodigo(i.getItemId());
					if( producto != null ){
							supplierPrice = supplierPrice.add(producto.getValor().multiply(new BigDecimal(i.quantity), MathContext.DECIMAL32));
							cantidadDisponible = producto.getCantidad().intValue();
					}
				}
			}
            org.rapidservice.rapidservice.Quote _returnResult = new org.rapidservice.rapidservice.Quote();
            _returnResult.setSupplierPrice(supplierPrice.toString());
            _returnResult.setQuantityAvailable(cantidadDisponible);
            _return.setResult(_returnResult);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see org.rapidservice.rapidservice.RapidService#orderQuoute(org.rapidservice.rapidservice.OrderQuouteElement  parameters )*
     */
    public org.rapidservice.rapidservice.OrderQuouteResponseElement orderQuoute(OrderQuouteElement parameters) { 
        LOG.info("Executing operation orderQuoute");
        System.out.println(parameters);
        try {
            org.rapidservice.rapidservice.OrderQuouteResponseElement _return = new org.rapidservice.rapidservice.OrderQuouteResponseElement();
            _return.setResult(true);
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
